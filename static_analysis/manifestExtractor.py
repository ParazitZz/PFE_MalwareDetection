import os
import pickle

import pandas as pd
import numpy as np 

from androguard.core.bytecodes import apk
from androguard.core.bytecodes.dvm import DalvikVMFormat
from androguard.core.analysis import analysis
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter


DIR = "static_analysis"
apk_directory = os.path.join(DIR, "apks")
out_directory = os.path.join(DIR, "features")

def intentFilters(itemtype, name, apk_obj):
    intents = []
    for action,intent_name in apk_obj.get_intent_filters(itemtype, name).items():
        for intent in intent_name:
            intents.append("intent::"+intent)
    return intents

def features_from_manifest(in_dir, filename, out_dir):
    filename_without_apk = filename[:-4]

    a = apk.APK(os.path.join(in_dir, filename))
    features = a.get_features()
    permissions = a.get_permissions()
    activities = a.get_activities()
    services = a.get_services()
    receivers = a.get_receivers()
    providers = a.get_providers()
    intents = []

    intents.extend(intentFilters('activity', activities, a))
    intents.extend(intentFilters('service', services, a))
    intents.extend(intentFilters('receiver', receivers, a))

    features = ["feature::" + x for x in features]
    permissions = ["permission::" + x for x in permissions]
    activities = ['activity::' + x for x in activities]
    receivers = ["service_receiver::" + x for x in receivers]
    services = ["service_receiver::" + x for x in services]
    service_receiver = services + receivers
    providers = ["provider::" + x for x in providers]

    all_manifest = features + permissions + activities + service_receiver + providers 

    for x in all_manifest:
        assert '::' in x, f"Problems in manifest extraction : feature '{x}' unknown"

    with open(os.path.join(out_dir, filename_without_apk), 'w') as f:
        for line in all_manifest:
            f.write(line + '\n')

def extract_all_features(in_dir, out_dir):
    already_processed = pd.Series(os.listdir(out_dir), dtype=object)
    to_process = pd.Series(os.listdir(in_dir), dtype=object)
    to_process = to_process.str[:-4]
    to_process = to_process[~to_process.isin(already_processed)]
    for i, apk in enumerate(to_process):
        print(f"Processing {i + len(already_processed)}/{len(to_process) + len(already_processed)}, apk {apk}")
        try:
            features_from_manifest(in_dir, apk+'.apk', out_dir)
        except Exception as e:
            print(f"Skipped this apk because of error : {e}")


if __name__ == "__main__":
    parser = ArgumentParser(
        description='Accumulates all possible features of the observations in sparse string format ',
        formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('-i', '--input', type=str, default=apk_directory, help='The directory in which the input apks'
                                                                              'are located.')
    parser.add_argument('-o', '--output', type=str, default=out_directory, help='The directory which the output files '
                                                                            'with features should be written to.')
    
    args = parser.parse_args()
    apk_directory = args.input
    out_directory = args.output

    extract_all_features(apk_directory, out_directory)