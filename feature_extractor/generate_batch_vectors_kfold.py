from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from csv import reader
from math import ceil
from pickle import dump, load
import os
from os import listdir, mkdir
from os.path import basename, isdir, join, splitext, isfile
import sys
import pandas
from generate_batch_vectors import *

TRAIN_PATH = "../strat_feature_vectors"

if __name__ == "__main__":
    parser = ArgumentParser(description='Generates python vectors from string observations',
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--number', type=int, default=observations_per_file, help='Number of observations per '
                                                                                        'outputted file. The higher '
                                                                                        'the number, the higher the '
                                                                                        'memory requirements.')
    parser.add_argument('-i', '--input', type=str, default=in_directory, help='The directory in which the input '
                                                                              'observations in their raw string format '
                                                                              'are located. Must be the same directory '
                                                                              'that was also used as input directory for '
                                                                              '`acc_features.py`.')
    parser.add_argument('-l', '--labels', type=str, default=labels_path, help='The path to a CSV file that assigns the '
                                                                              'positive class label to certain '
                                                                              'observations contained in the input '
                                                                              'directory. It contains two columns: '
                                                                              'An observation id column and a malware '
                                                                              'family column. Pass `None` to skip'
                                                                              'labelling')
    parser.add_argument('-f', '--features', type=str, default=features_path,
                        help='The path to the file which contains all '
                             'possible features in a binary format. '
                             'This should be the output file of '
                             '`acc_features.py`.')
    parser.add_argument('-o', '--output', type=str, default=out_directory, help='The directory which the output files '
                                                                                'should be written to.')
    parser.add_argument('-t', '--topclass', type=int, default=9, help='The classification you want (binary=0 / topclass = 1..179 ).'
                                                                      'If you want top 10 classes : 0-9 will be the top classes, 10 will be others and 11 will be benin')
    parser.add_argument('-u', '--urls', type=str, default=urls_path, help='Embeds the Urls instead of juste counting them or treating them as separate features'
                                                                          'File where all the different urls are')
    args = parser.parse_args()
    features_path = args.features
    labels_path = args.labels
    in_directory = args.input
    observations_per_file = args.number
    out_directory = args.output
    top_classes = args.topclass
    urls_path = args.urls
    
    for i in range(10):
        for elem in ['train', 'val', 'test']:
            path = TRAIN_PATH +'/'+str(i+1)
            list_names = pd.read_csv(path+'/strat_'+elem+'_'+str(i+1)+'.csv', sep=",")['filename'].tolist()[:10]
            output = path+'/'+elem+'.p'
            generate_vectors(features_path, labels_path, in_directory, observations_per_file, output, urls_path, top_classes, list_names)